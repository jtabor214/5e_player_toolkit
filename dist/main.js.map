{"version":3,"file":"main.js","mappings":"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","sources":["webpack://boblins-adventurers-guide/./src/scripts/backgroundRender.js","webpack://boblins-adventurers-guide/./src/scripts/classRender.js","webpack://boblins-adventurers-guide/./src/scripts/featRender.js","webpack://boblins-adventurers-guide/./src/scripts/magicItemRender.js","webpack://boblins-adventurers-guide/./src/scripts/raceRender.js","webpack://boblins-adventurers-guide/./src/scripts/weaponsRender.js","webpack://boblins-adventurers-guide/./node_modules/marked/lib/marked.esm.js","webpack://boblins-adventurers-guide/webpack/bootstrap","webpack://boblins-adventurers-guide/webpack/runtime/define property getters","webpack://boblins-adventurers-guide/webpack/runtime/hasOwnProperty shorthand","webpack://boblins-adventurers-guide/webpack/runtime/make namespace object","webpack://boblins-adventurers-guide/./src/index.js"],"sourcesContent":["import { marked } from \"marked\";\n\nclass BackgroundRender{\n\n  constructor(data) {\n    this.data = data;\n\tthis.populateBackgroundDOM(data);\n  }\n\n\tpopulateBackgroundDOM(data){\n\t\tconst backgroundList = document.getElementById('visualContainer');\n\t\tconst list = document.createElement('ul');\n\t\tlist.classList.add('backgroundTitles');\n\n\t\tdata.results.forEach(background => {\n\t\t\tconst backgroundDiv = document.createElement('div');\n\t\t\tconst backgroundEle = document.createElement('button');\n\t\t\tbackgroundEle.classList.add('title');\n\t\t\tbackgroundEle.textContent = background.name;\n\n\t\t\tconst image = document.createElement('img');\n\t\t\timage.classList.add(\"background-image\");\n\t\t\timage.src = `./assets/background_icons/${background.name}.png`;\n\n\t\t\tbackgroundDiv.appendChild(image);\n\t\t\tbackgroundDiv.appendChild(backgroundEle);\n\t\t\t\n\n\t\t\tbackgroundEle.addEventListener('click', ev => {\n\t\t\t\trenderBackgroundDesc(ev, background);\n\t\t\t});\n\n\t\t\tlist.appendChild(backgroundDiv);\n\t\t});\n\n\t\tbackgroundList.innerHTML = '';\n\t\tbackgroundList.appendChild(list);\n\t};\n};\n\nconst renderBackgroundDesc = (ev, background) => {\n\tconst backgroundInfo = document.getElementById('dataContainer');\n\tconst list = document.createElement('ul');\n\tconst targetInfo = [background.desc, background.skill_proficiencies, background.equipment, background.suggested_characteristics];\n\n\ttargetInfo.forEach(info => {\n\t\tconst backgroundStats = document.createElement('p');\n\t\tbackgroundStats.innerHTML = marked.parse(info);\n\t\tlist.appendChild(backgroundStats);\n\t});\n\n\tbackgroundInfo.innerHTML = '';\n\tbackgroundInfo.appendChild(list);\n\n};\n\nexport default BackgroundRender;","import { marked } from \"marked\";\n\nclass ClassRender{\n\n\tconstructor(data) {\n\t\t\tthis.data = data;\n\t\t\tthis.populateClassDOM(data);\n\t}\n\n\tpopulateClassDOM(data){\n\t\tconst _classList = document.getElementById('visualContainer');\n\t\tconst list = document.createElement('ul');\n\t\tlist.classList.add('classTitles');\n\n\t\tdata.results.forEach(_class => {\n\n\t\t\tconst classDiv = document.createElement('div');\n\t\t\tconst classEle = document.createElement('button');\n\t\t\tclassEle.classList.add('title');\n\t\t\tclassEle.textContent = _class.name;\n\n\t\t\tconst image = document.createElement('img');\n\t\t\timage.classList.add(\"class-image\");\n\t\t\timage.src = `./assets/class_icons/${_class.name}.png`;\n\n\t\t\tclassDiv.appendChild(image);\n\t\t\tclassDiv.appendChild(classEle);\n\n\t\t\tclassEle.addEventListener('click', ev => {\n\t\t\t\trenderClassDesc(ev, _class);\n\t\t\t});\n\t\t\tlist.appendChild(classDiv);\n\n\t\t});\n\n\t\t_classList.innerHTML = '';\n\t\t_classList.appendChild(list);\n\t};\n};\n\nconst renderClassDesc = (ev, _class) => {\n\t const classInfo = document.getElementById('dataContainer');\n\t const list = document.createElement('ul');\n\t const targetInfo = [_class.desc, _class.prof_armor, _class.prof_weapons, _class.prof_tools, _class.prof_saving_throws, _class.prof_skills, _class.equipment];\n\n\t targetInfo.forEach(info => {\n\t\t const classStats = document.createElement('p');\n\t\t classStats.innerHTML = marked.parse(info);\n\t\t list.appendChild(classStats);\n\t });\n\n\t classInfo.innerHTML = '';\n\t classInfo.appendChild(list);\n\n};\n\nexport default ClassRender;","import { marked } from \"marked\";\n\nclass FeatRender{\n\n  constructor(data) {\n    this.data = data;\n\t  this.populateFeatDOM(data);\n  }\n\n  populateFeatDOM(data){\n    const featList = document.getElementById('visualContainer');\n    const list = document.createElement('ul');\n    list.classList.add('featTitles');\n\n    data.results.forEach(feat => {\n      const featEle = document.createElement('button');\n      featEle.classList.add('title');\n      featEle.textContent = feat.name;\n      featEle.addEventListener('click', ev => {\n        renderFeatDesc(ev, feat);\n      });\n\n      list.appendChild(featEle);\n    });\n\n    featList.innerHTML = '';\n    featList.appendChild(list);\n  };\n};\n\nconst renderFeatDesc = (ev, feat) => {\n  const featInfo = document.getElementById('dataContainer');\n  const list = document.createElement('ul');\n  const targetInfo = [feat.name, feat.desc, feat.prerequisite, feat.effects_desc.toString()]; \n\n  targetInfo.forEach(info => {\n    \n    if (!info){\n      info = \"\";\n    }\n\n    const featStats = document.createElement('p');\n    featStats.innerHTML = marked.parse(info);\n    list.appendChild(featStats);\n  });\n\n  featInfo.innerHTML = '';\n  featInfo.appendChild(list);\n\n};\n\nexport default FeatRender;","import { marked } from \"marked\";\n\nclass MagicItemRender{\n\n\tconstructor(data){\n\t\tthis.data = data;\n\t\tthis.populateMagicItemDOM(data);\n}\n\n\tpopulateMagicItemDOM(data){\n\t\tconst itemList = document.getElementById('visualContainer');\n\t\tconst list = document.createElement('ul');\n\t\tlist.classList.add('itemNames');\n\n\t\tdata.results.forEach(item => {\n\t\t\tconst itemEle = document.createElement('button');\n\t\t\titemEle.classList.add('name');\n\t\t\titemEle.textContent = item.name;\n\t\t\titemEle.addEventListener('click', ev => {\n\t\t\t\trenderMagicItemDesc(ev, item);\n\t\t\t});\n\n\t\t\tlist.appendChild(itemEle);\n\t\t});\n\n\t\titemList.innerHTML = '';\n\t\titemList.appendChild(list);\n\t};\n};\n\nconst renderMagicItemDesc = (ev, item) => {\n\tconst itemInfo = document.getElementById('dataContainer');\n\tconst list = document.createElement('ul');\n\tconst targetInfo = [item.name, item.type, item.desc, item.rarity];\n\n\ttargetInfo.forEach(info =>{\n\t\tconst itemStats = document.createElement('p');\n\t\titemStats.innerHTML = marked.parse(info);\n\t\tlist.appendChild(itemStats);\n\t});\n\n\titemInfo.innerHTML = '';\n\titemInfo.appendChild(list);\n\n};\n\nexport default MagicItemRender;","import { marked } from \"marked\";\n// import dwarf from \"../../assets/characters/Dwarf.png\";\n\n\nclass RaceRender{\n  \n  constructor(data) {\n\t\t  this.data = data;\n\t\t  this.populateRaceDOM(data);\n  }\n\n  populateRaceDOM(data){\n\t  const raceList = document.getElementById('visualContainer');\n    const list = document.createElement('ul');\n\t\tlist.classList.add('raceNames');\n\n    data.results.forEach(race => {\n      \n      const raceDiv = document.createElement('div');\n      const raceEle = document.createElement('button');\n      raceEle.classList.add('name');\n      raceEle.textContent = race.name;\n\n      const image = document.createElement('img');\n      image.classList.add(\"race-image\");\n      image.src = `./assets/characters/${race.name.replace(/-/g, '').toLowerCase()}.png`;\n\n      raceDiv.appendChild(image);\n      raceDiv.appendChild(raceEle);\n\n\t\t\traceEle.addEventListener('click', ev => {\n\t\t\t\trenderRaceDesc(ev, race);\n\t\t\t});\n      list.appendChild(raceDiv);\n    \n    });\n\n\t\traceList.innerHTML = '';\n    raceList.appendChild(list);\n  };\n}\n\nconst renderRaceDesc =  (ev, race) => {\n  const raceInfo = document.getElementById('dataContainer');\n  const list = document.createElement('ul');\n  const targetInfo = [race.desc, race.size, race.traits, race.vision];\n\n\n  targetInfo.forEach(info => {\n    const raceStats = document.createElement('p');\n    raceStats.innerHTML = marked.parse(info);\n    list.appendChild(raceStats);\n  });\n  \n\n  raceInfo.innerHTML = '';\n  raceInfo.appendChild(list);\n\n};\n\nexport default RaceRender;","import { marked } from \"marked\";\n\nclass WeaponRender{\n\n\tconstructor(data){\n\t\tthis.data = data;\n\t\tthis.populateWeaponDOM(data);\n\t}\n\n\tpopulateWeaponDOM(data){\n\t\tconst weaponList = document.getElementById('visualContainer');\n\t\tconst list = document.createElement('ul');\n\t\tlist.classList.add('weaponNames');\n\n\t\tdata.results.forEach(weapon => {\n\t\t\tconst weaponEle = document.createElement('button');\n\t\t\tweaponEle.classList.add('name');\n\t\t\tweaponEle.textContent = weapon.name;\n\t\t\tweaponEle.addEventListener('click', ev => {\n\t\t\t\trenderWeaponDesc(ev, weapon);\n\t\t\t});\n\n\t\t\tlist.appendChild(weaponEle);\n\t\t});\n\n\t\tweaponList.innerHTML = '';\n\t\tweaponList.appendChild(list);\n\t};\n};\n\nconst renderWeaponDesc = (ev, weapon) => {\n\tconst weaponInfo = document.getElementById('dataContainer');\n\tconst list = document.createElement('ul');\n\tconst targetInfo = [weapon.name, weapon.category, weapon.cost, weapon.damage_dice, weapon.damage_type, weapon.weight, weapon.properties.toString()];\n\n\ttargetInfo.forEach(info =>{\n\t\tconst weaponStats = document.createElement('p');\n\t\tweaponStats.innerHTML = marked.parse(info);\n\t\tlist.appendChild(weaponStats);\n\t});\n\n\tweaponInfo.innerHTML = '';\n\tweaponInfo.appendChild(list);\n\n};\n\nexport default WeaponRender;\n\n\n","/**\n * marked v11.1.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = rtrim(cap[0].replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nconst _comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}$+<=>`^|~';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(lang)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// const { default: Example } = require(\"./scripts/example\");\nconst { default: RaceRender} = require(\"./scripts/raceRender\");\nconst { default: ClassRender} = require(\"./scripts/classRender\");\nconst { default: BackgroundRender} = require(\"./scripts/backgroundRender\");\nconst { default: FeatRender} = require(\"./scripts/featRender\");\nconst { default: WeaponRender} = require(\"./scripts/weaponsRender\");\nconst { default: MagicItemRender} = require(\"./scripts/magicItemRender\");\n\n\n// document.addEventListener(\"DOMContentLoaded\", () => {\n//   const main = document.getElementById(\"main\");\n//   new Example(main);\n//   // console.log(\"hello world\");\n// });\n// document.addEventListener(\"DOMContentLoaded\", () => {\n//   const raceName = document.getElementById(\"race\")\n// })\n\nconst backgroundMusic = document.getElementById(\"music\");\nbackgroundMusic.volume = 0.2;\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const audioEle = document.getElementById('music');\n  const audioButton = document.getElementById('audio-button');\n  const speakerIcon = document.getElementById('speaker-icon');\n\n  audioButton.addEventListener('click', () => {\n    if (audioEle.paused) {\n      audioEle.play();\n      speakerIcon.classList.remove('fa-play');\n      speakerIcon.classList.add('fa-pause');\n    } else {\n      audioEle.pause();\n      speakerIcon.classList.remove('fa-pause');\n      speakerIcon.classList.add('fa-play');\n    }\n  });\n});\n\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    const openModal = document.getElementById('modal-tab');\n    const closeModal = document.getElementById('close-modal-button');\n    const modalEle = document.getElementById(\"message\");\n\n    // modalEle.style.display = 'flex';\n\n    openModal.addEventListener('click', () => {\n      window.location.reload();\n      // modalEle.style.display = 'flex';\n    });\n\n    closeModal.addEventListener('click', () =>{\n      modalEle.style.display = 'none';\n    });\n\n    // window.addEventListener('click', (ev) => {\n    //   if (ev.target !== openModal) {\n    //     modalEle.style.display = 'none';\n    //   }\n    // });\n  });\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\t const raceTab = document.getElementById(\"race-tab\");\n   raceTab.addEventListener('click', renderRaceInfo);\n});\n\nconst renderRaceInfo = async () => {\n  const response = await fetch (\"https://api.open5e.com/races/?document__slug__not_in=toh\");\n  if (response.ok) {\n    const data = await response.json();\n\n    new RaceRender(data);\n  }\n};\n\nwindow.renderRaceInfo = renderRaceInfo;\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const classTab = document.getElementById(\"class-tab\");\n  classTab.addEventListener('click', renderClassInfo);\n});\n\nconst renderClassInfo = async () => {\n  const response = await fetch (\"https://api.open5e.com/classes/\");\n  if (response.ok) {\n    const data = await response.json();\n\n    new ClassRender(data);\n  }\n};\n\nwindow.renderClassInfo = renderClassInfo;\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const backgroundsTab = document.getElementById(\"backgrounds-tab\");\n  backgroundsTab.addEventListener('click', renderBackgroundInfo);\n});\n\nconst renderBackgroundInfo = async () => {\n  const response = await fetch (\"https://api.open5e.com/backgrounds/?document__slug__in=a5e\");\n  if (response.ok) {\n    const data = await response.json();\n\n    new BackgroundRender(data);\n  }\n};\n\nwindow.renderBackgroundInfo =  renderBackgroundInfo;\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const featsTab = document.getElementById(\"feats-tab\");\n  featsTab.addEventListener('click', renderFeatInfo);\n});\n\nconst renderFeatInfo = async () => {\n  const response = await fetch (\"https://api.open5e.com/v1/feats/\");\n  if (response.ok) {\n    const data = await response.json();\n\n    new FeatRender(data);\n  }\n};\n\nwindow.renderFeatInfo =  renderFeatInfo;\n\n// document.addEventListener(\"DOMContentLoaded\", () =>{\n//   const weaponsTab = document.getElementById(\"weapons-tab\");\n//   weaponsTab.addEventListener('click', renderWeaponInfo);\n// });\n\n// const renderWeaponInfo = async () => {\n//   const response = await fetch (\"https://api.open5e.com/v1/weapons/?document__slug__not_in=toh\");\n//   if (response.ok) {\n//     const data = await response.json();\n//     console.log(data);\n//     new WeaponRender(data);\n//   }\n// };\n\n// window.renderWeaponInfo = renderWeaponInfo;\n\n// document.addEventListener(\"DOMContentLoaded\", () => {\n//   const armorTab = document.getElementById(\"armor-tab\");\n//   armorTab.addEventListener('click', renderArmorInfo);\n// });\n\n// const renderArmorInfo = async () => {\n//   const response = await fetch (\"https://api.open5e.com/v1/armor/\");\n//   if (response.ok) {\n//     const data = await response.json();\n//     console.log(data);\n//     new ArmorRender(data);\n//   }\n// };\n\n// window.renderArmorInfo = renderArmorInfo;\n\n// document.addEventListener(\"DOMContentLoaded\", () =>{\n//   const magicItemsTab = document.getElementById(\"magic-items-tab\");\n//   magicItemsTab.addEventListener('click', renderItemInfo);\n// });\n\n// const renderItemInfo = async () => {\n//   const response = await fetch (\"https://api.open5e.com/v1/magicitems/?document__slug__in=wotc-srd&ordering=rarity\");\n//   if (response.ok) {\n//     const data = await response.json();\n//     console.log(data);\n//     new MagicItemRender(data);\n//   }\n// };\n\n"],"names":["constructor","data","this","populateBackgroundDOM","backgroundList","document","getElementById","list","createElement","classList","add","results","forEach","background","backgroundDiv","backgroundEle","textContent","name","image","src","appendChild","addEventListener","ev","renderBackgroundDesc","backgroundInfo","desc","skill_proficiencies","equipment","suggested_characteristics","info","backgroundStats","innerHTML","marked","parse","populateClassDOM","_classList","_class","classDiv","classEle","renderClassDesc","classInfo","prof_armor","prof_weapons","prof_tools","prof_saving_throws","prof_skills","classStats","populateFeatDOM","featList","feat","featEle","renderFeatDesc","featInfo","prerequisite","effects_desc","toString","featStats","populateMagicItemDOM","itemList","item","itemEle","renderMagicItemDesc","itemInfo","type","rarity","itemStats","populateRaceDOM","raceList","race","raceDiv","raceEle","replace","toLowerCase","renderRaceDesc","raceInfo","size","traits","vision","raceStats","populateWeaponDOM","weaponList","weapon","weaponEle","renderWeaponDesc","weaponInfo","category","cost","damage_dice","damage_type","weight","properties","weaponStats","_defaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","unescapeTest","unescape","_","n","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","tokens","inlineTokens","_Tokenizer","options","rules","space","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","indentCodeCompensation","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","headers","aligns","rows","header","align","row","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","indexOf","level","findClosingBracket","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","emStrongLDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","bullet","_paragraph","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","_punctuation","_inlineComment","_inlineLabel","inlineNormal","blockSkip","reflinkSearch","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","listitem","checkbox","tablerow","content","tablecell","flags","strong","em","cleanHref","out","_TextRenderer","_Parser","textRenderer","parseInline","renderers","genericToken","ret","parser","headingToken","codeToken","tableToken","j","k","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","markedInstance","defaults","setOptions","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","prototype","all","catch","message","msg","reject","getDefaults","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","get","hasOwnProperty","r","Symbol","toStringTag","value","default","RaceRender","require","ClassRender","BackgroundRender","FeatRender","WeaponRender","MagicItemRender","volume","audioEle","audioButton","speakerIcon","paused","play","remove","pause","openModal","closeModal","modalEle","window","location","reload","style","display","renderRaceInfo","response","fetch","ok","json","renderClassInfo","renderBackgroundInfo","renderFeatInfo"],"sourceRoot":""}